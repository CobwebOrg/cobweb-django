# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-23 02:20
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import webresources.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('deprecated', models.DateTimeField(blank=True, null=True, verbose_name='Date Deprecated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True, verbose_name='Name')),
                ('address', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Address')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('sector', models.CharField(blank=True, choices=[('a', 'Academic'), ('c', 'Corporate'), ('g', 'Government'), ('n', 'Non-Profit'), ('o', 'Other')], max_length=1, null=True, verbose_name='Sector')),
                ('organization_type', models.CharField(blank=True, choices=[('arc', 'Archive'), ('dat', 'Datacenter'), ('dpt', 'Department'), ('div', 'Division'), ('lab', 'Laboratory'), ('lib', 'Library'), ('mus', 'Museum'), ('pro', 'Project'), ('oth', 'Other')], max_length=3, null=True, verbose_name='Type')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('deprecated', models.DateTimeField(blank=True, null=True, verbose_name='Date Deprecated')),
                ('raw_metadata', models.TextField(blank=True, null=True)),
                ('identifier', webresources.models.NocryptoURLField(blank=True, editable=False, null=True, unique=True, verbose_name='Archive-It.org Identifier')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('deprecated', models.DateTimeField(blank=True, null=True, verbose_name='Date Deprecated')),
            ],
            options={
                'verbose_name_plural': 'Software',
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='software',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Software'),
        ),
        migrations.AddField(
            model_name='agent',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='agent',
            unique_together=set([('user', 'software')]),
        ),
    ]
