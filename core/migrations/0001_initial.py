# Generated by Django 2.0.4 on 2018-04-21 22:54

import core.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('languages_plus', '0004_auto_20171214_0004'),
        ('auth', '0009_alter_user_last_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('deprecated', models.DateTimeField(blank=True, null=True, verbose_name='Date Deprecated')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when_created', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField()),
                ('visibility', models.CharField(choices=[('Public', 'Public'), ('Organizational', 'Organizational'), ('Project', 'Project')], default='Public', max_length=20)),
                ('text', models.TextField()),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notes', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(null=True, verbose_name='Name')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('sector', models.CharField(blank=True, choices=[('Academic', 'Academic'), ('Corporate', 'Corporate'), ('Government', 'Government'), ('Non-Profit', 'Non-Profit'), ('Other', 'Other')], max_length=10, null=True, verbose_name='Sector')),
                ('organization_type', models.CharField(blank=True, choices=[('Archive', 'Archive'), ('Datacenter', 'Datacenter'), ('Department', 'Department'), ('Division', 'Division'), ('Laboratory', 'Laboratory'), ('Library', 'Library'), ('Museum', 'Museum'), ('Project', 'Project'), ('Other', 'Other')], max_length=10, null=True, verbose_name='Type')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('deprecated', models.DateTimeField(blank=True, null=True, verbose_name='Date Deprecated')),
                ('identifier', core.models.NormalizedURLField(blank=True, editable=False, null=True, unique=True, verbose_name='Archive-It.org Identifier')),
                ('administrators', models.ManyToManyField(related_name='organizations_administered', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', core.models.NormalizedURLField(max_length=1000, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('asserted_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='languages_plus.Language')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Resource')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceScan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Redirected', 'Redirected'), ('Inactive', 'Inactive'), ('Unknown', 'Unknown')], default='Unknown', max_length=50)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='languages_plus.Language')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Resource')),
            ],
        ),
        migrations.CreateModel(
            name='SubjectHeading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='resourcedescription',
            name='subject_headings',
            field=models.ManyToManyField(blank=True, to='core.SubjectHeading'),
        ),
        migrations.AddField(
            model_name='resourcedescription',
            name='tags',
            field=models.ManyToManyField(blank=True, to='core.Tag'),
        ),
        migrations.AddField(
            model_name='user',
            name='affiliations',
            field=models.ManyToManyField(related_name='affiliated_users', to='core.Organization'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='resourcedescription',
            unique_together={('resource', 'asserted_by')},
        ),
    ]
