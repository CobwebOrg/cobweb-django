# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-04 23:47
from __future__ import unicode_literals

from django.db import migrations
from collections import defaultdict

MODELS_WITH_METADATA = [
    # ('core', 'Organization'),
    # ('projects', 'Project'),
    # ('archives', 'Collection'),
    # ('archives', 'Claim'),
    # ('archives', 'Holding'),
    ('datasources', 'APIEndpoint'),
]

def forwards_func(apps, schema_editor):
    # Copy metadata from Metadatum objects into JSONField
    for app_name, model_name in MODELS_WITH_METADATA:
        for obj in apps.get_model(app_name, model_name).objects.all():
            obj_metadata = list()
            for md in obj.metadatums.all():
                vocabulary, element, value = '', '', ''
                if md.md_property and md.md_property.vocabulary:
                    vocabulary = md.md_property.vocabulary.name
                    if md.md_property.name is not None:
                        # controlled vocabulary property: value
                        element = md.md_property.name or ''
                        value = md.name
                    else:
                        # controlled vocab keyword
                        # e.g. LCSH subject
                        element = md.name
                elif md.md_property:
                    # uncontrolled key: value
                    element = md.md_property.name
                    value = md.name
                else:
                    # uncontrolled keyword
                    element = md.name
                obj_metadata.append({
                    'vocabulary': vocabulary,
                    'element': element,
                    'value': value,
                })
            obj.metadata = obj_metadata
            obj.save()

def reverse_func(apps, schema_editor):
    # Copy metadata from JSONField into Metadatum objects
    for app_name, model_name in MODELS_WITH_METADATA:
        for obj in apps.get_model(app_name, model_name).objects.all():
            # for key, values in obj.metadata.items():
            #     key_parts = ':'.split(key)
            #     if len(key_parts) == 2:
            #         vocabulary = (apps.get_model('metadata', 'MDVocabulary')
            #             .objects.get_or_create(name=key_parts)[0])
            #         md_property = (apps.get_model('metadata', 'MDProperty')
            #             .objects
            #             .get_or_create(vocabulary=vocabulary, name=name)[0])
            #     elif len(key_parts) == 1:
            #         md_property = key
            #     else:
            #         raise ValueError("Can't turn {} into MDProperty.").format(key)
            #     for value in values:
            #         obj.metadatums.add(
            #             apps.get_model('metadata', 'Metadatum').objects
            #             .get_or_create(md_property = md_property, name=value)[0]
            #         )
            obj.metadata = {}
            obj.save()


class Migration(migrations.Migration):

    dependencies = [
        ('datasources', '0004_apiendpoint_metadata'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
