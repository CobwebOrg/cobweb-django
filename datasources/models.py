from django.conf import settings
from django.contrib.auth import get_user_model
from django.db import models
from sickle import Sickle

from core.models import Organization
from archives.models import Collection, Holding


class APIProtocol(models.Model):
    name = models.CharField(max_length=200, unique=True)
    identifier = models.URLField(max_length=200, unique=True, null=True)


    def __str__(self):
        return self.name or 'APIProtocol {}'.format(self.pk)

class APIEndpoint(models.Model):
    location = models.URLField(max_length=200, unique=True)
    organization = models.ForeignKey('core.Organization')
    protocol = models.ForeignKey(APIProtocol)

    agent = models.OneToOneField(settings.AUTH_USER_MODEL, editable=False,
        null=True, blank=True)

    def save(self, *args, **kwargs):
        super.save()

    def get_agent(self):
        if not self.agent:
            self.agent = get_user_model().objects.get_or_create(
                username = "APIEndpoint_agent_{}".format(self.id)
            )
        return self.agent

    def __str__(self):
        return self.location or 'APIEndpoint {}'.format(self.pk)


def eprint(*args, **kwargs):
    print(*args, file=stderr, **kwargs)

def setspec_to_urls(setspec):
    if setspec[:13] == 'organization:':
        org_id = setspec[13:]
        org_url = "http://archive-it.org/organizations/{}".format(org_id)
        api_url = "https://archive-it.org/oai/organizations/{}".format(org_id)
        return org_url, api_url
    else:
        raise ValueError("Can't find parse setSpec: {}".format(setspec))

def get_organization(record):
    if len(record.header.setSpecs) == 1 and record.header.setSpecs[0][:13] == 'organization:':
        id_number = record.header.setSpecs[0][13:] # actually should be string
        org_url, api_url = setspec_to_urls(only_one(setspec))
        return uri, api_url
    else:
        eprint(record.header.identifier, record.header.setSpecs)
        raise ValueError("Can't find organization from setspecs.")

def only_one(list_object):
    """If list_object has exactly 1 item, returns it. Otherwise raises ValueError"""
    if len(list_object) == 1:
        return list_object[0]
    else:
        raise ValueError("Expected a list with exactly one item")

class OAIPMH_importer:
    root_class = Organization
    set_class = Collection
    record_class = Holding

    def __init__(url):
        self.sickle = Sickle(url)

    def harvest(self, api):
        ait = Sickle(AIT_COLLECTIONS_API)

        self.__harvest_identification__(ait)

        for organization in ait.ListSets():
            self.__harvest_set__(organization)

        records = ait.ListRecords(metadataPrefix='oai_dc')
        for record in records:
            self.__harvest_record__(record)

    def __harvest_record__(self, record):
        uri2 = record.metadata.pop('identifier')
        uri = nocrypto_url( record.header.identifier )

        organization_uri, organization_api = setspec_to_urls(only_one(record.header.setSpecs))
        collection = Collection.objects.get_or_create(
            identifier=uri,
            defaults={
                'name': "Autogenerated Collection for {}".format(uri),
                'organization': Organization.objects.get_or_create(
                    identifier=organization_uri,
                    defaults={
                        'name': "Autogenerated Organization for {}".format(organization_uri)
                    }
                )[0]
            }
        )[0]


        APIEndpoint.objects.get_or_create(
            organization = collection.organization,
            location = organization_api,
            protocol = PROTOCOL,
        )

        collection.raw_metadata = record.raw

        try:
            collection.name = ' / '.join( record.metadata.pop('title') )
        except Exception as ex:
            eprint(ex, type(ex))

        # try:
        #     collection.description = only_one(record.metadata.pop('description'))
        # except Exception as ex:
        #     eprint(ex, type(ex), record.metadata.keys())

        # for tag_property, tag_values in record.metadata.items():
        #     for tag_value in tag_values:
        #         try:
        #             collection.tags.add(
        #                 Tag.objects.get_or_create(
        #                     tag_property=tag_property,
        #                     tag_value=tag_value
        #                 )[0]
        #             )
        #         except Exception as ex:
        #             eprint(ex, type(ex))

        collection.full_clean()
        collection.save()

    def __harvest_identification__(self, sickle):
        identification = sickle.Identify()
        organization = Organization.objects.get_or_create(identifier = 'http://archive-it.org')[0]

        metadata = dict(identification)

        if not nocrypto_url(only_one(metadata.pop('baseURL'))) == nocrypto_url(AIT_COLLECTIONS_API):
            raise ValueError

        organization.name = only_one(metadata.pop('repositoryName'))

        # METADATA TAGS TO POSSIBLY HARVEST:
            # deletedRecord
            # earliestDatestamp
            # protocolVersion
            # adminEmail
            # granularity
        # also identification.raw

    def __harvest_organization__(self, org):
        if org.setSpec == 'organization' and org.setName == 'organization':
            # archive-it is feeding us a dummy record
            return
        try:
            organization_uri, organization_api = setspec_to_urls(org.setSpec)
            organization = Organization.objects.get_or_create(identifier=organization_uri)[0]
            organization.name = org.setName
            organization.save()
        except Exception as ex:
            eprint(ex, type(ex))

class ait_collections_importer(OAIPMH_importer):
    root_class = Organization
    set_class = Organization
    record_class = Collection